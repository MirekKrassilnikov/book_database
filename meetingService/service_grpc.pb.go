// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: service.proto

package meetingservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoomsService_GetRooms_FullMethodName = "/meetingservice.RoomsService/GetRooms"
)

// RoomsServiceClient is the client API for RoomsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса RoomsService
type RoomsServiceClient interface {
	GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Rooms, error)
}

type roomsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsServiceClient(cc grpc.ClientConnInterface) RoomsServiceClient {
	return &roomsServiceClient{cc}
}

func (c *roomsServiceClient) GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Rooms, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rooms)
	err := c.cc.Invoke(ctx, RoomsService_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomsServiceServer is the server API for RoomsService service.
// All implementations must embed UnimplementedRoomsServiceServer
// for forward compatibility.
//
// Определение сервиса RoomsService
type RoomsServiceServer interface {
	GetRooms(context.Context, *Empty) (*Rooms, error)
	mustEmbedUnimplementedRoomsServiceServer()
}

// UnimplementedRoomsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomsServiceServer struct{}

func (UnimplementedRoomsServiceServer) GetRooms(context.Context, *Empty) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomsServiceServer) mustEmbedUnimplementedRoomsServiceServer() {}
func (UnimplementedRoomsServiceServer) testEmbeddedByValue()                      {}

// UnsafeRoomsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServiceServer will
// result in compilation errors.
type UnsafeRoomsServiceServer interface {
	mustEmbedUnimplementedRoomsServiceServer()
}

func RegisterRoomsServiceServer(s grpc.ServiceRegistrar, srv RoomsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoomsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomsService_ServiceDesc, srv)
}

func _RoomsService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomsService_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).GetRooms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomsService_ServiceDesc is the grpc.ServiceDesc for RoomsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meetingservice.RoomsService",
	HandlerType: (*RoomsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRooms",
			Handler:    _RoomsService_GetRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	MeetingService_CreateMeeting_FullMethodName     = "/meetingservice.MeetingService/CreateMeeting"
	MeetingService_CheckAvailability_FullMethodName = "/meetingservice.MeetingService/CheckAvailability"
	MeetingService_GetMeetingsInRoom_FullMethodName = "/meetingservice.MeetingService/GetMeetingsInRoom"
)

// MeetingServiceClient is the client API for MeetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса для создания встреч
type MeetingServiceClient interface {
	CreateMeeting(ctx context.Context, in *NewMeetingRequest, opts ...grpc.CallOption) (*NewMeetingResponse, error)
	CheckAvailability(ctx context.Context, in *AvailabilityRequest, opts ...grpc.CallOption) (*AvailabilityResponse, error)
	GetMeetingsInRoom(ctx context.Context, in *MeetingsInTheRoomRequest, opts ...grpc.CallOption) (*MeetingsInTheRoomResponse, error)
}

type meetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingServiceClient(cc grpc.ClientConnInterface) MeetingServiceClient {
	return &meetingServiceClient{cc}
}

func (c *meetingServiceClient) CreateMeeting(ctx context.Context, in *NewMeetingRequest, opts ...grpc.CallOption) (*NewMeetingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMeetingResponse)
	err := c.cc.Invoke(ctx, MeetingService_CreateMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) CheckAvailability(ctx context.Context, in *AvailabilityRequest, opts ...grpc.CallOption) (*AvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailabilityResponse)
	err := c.cc.Invoke(ctx, MeetingService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetingsInRoom(ctx context.Context, in *MeetingsInTheRoomRequest, opts ...grpc.CallOption) (*MeetingsInTheRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsInTheRoomResponse)
	err := c.cc.Invoke(ctx, MeetingService_GetMeetingsInRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServiceServer is the server API for MeetingService service.
// All implementations must embed UnimplementedMeetingServiceServer
// for forward compatibility.
//
// Определение сервиса для создания встреч
type MeetingServiceServer interface {
	CreateMeeting(context.Context, *NewMeetingRequest) (*NewMeetingResponse, error)
	CheckAvailability(context.Context, *AvailabilityRequest) (*AvailabilityResponse, error)
	GetMeetingsInRoom(context.Context, *MeetingsInTheRoomRequest) (*MeetingsInTheRoomResponse, error)
	mustEmbedUnimplementedMeetingServiceServer()
}

// UnimplementedMeetingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeetingServiceServer struct{}

func (UnimplementedMeetingServiceServer) CreateMeeting(context.Context, *NewMeetingRequest) (*NewMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) CheckAvailability(context.Context, *AvailabilityRequest) (*AvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedMeetingServiceServer) GetMeetingsInRoom(context.Context, *MeetingsInTheRoomRequest) (*MeetingsInTheRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingsInRoom not implemented")
}
func (UnimplementedMeetingServiceServer) mustEmbedUnimplementedMeetingServiceServer() {}
func (UnimplementedMeetingServiceServer) testEmbeddedByValue()                        {}

// UnsafeMeetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetingServiceServer will
// result in compilation errors.
type UnsafeMeetingServiceServer interface {
	mustEmbedUnimplementedMeetingServiceServer()
}

func RegisterMeetingServiceServer(s grpc.ServiceRegistrar, srv MeetingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeetingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeetingService_ServiceDesc, srv)
}

func _MeetingService_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_CreateMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).CreateMeeting(ctx, req.(*NewMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).CheckAvailability(ctx, req.(*AvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetingsInRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetingsInTheRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetingsInRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_GetMeetingsInRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetingsInRoom(ctx, req.(*MeetingsInTheRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetingService_ServiceDesc is the grpc.ServiceDesc for MeetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meetingservice.MeetingService",
	HandlerType: (*MeetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeeting",
			Handler:    _MeetingService_CreateMeeting_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _MeetingService_CheckAvailability_Handler,
		},
		{
			MethodName: "GetMeetingsInRoom",
			Handler:    _MeetingService_GetMeetingsInRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
